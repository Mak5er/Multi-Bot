import json
import os
import subprocess
from pathlib import Path

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from vosk import KaldiRecognizer, Model

from keyboards import keyboards as kb
from main import dp, bot


class VoiceToText(StatesGroup):
    voice_to_text = State()


class STT:
    # –ü–µ—Ä–µ–ª—ñ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
    MODELS = {
        "english": "handlers/models/vosk/vosk-model-en",
        "ukrainian": "handlers/models/vosk/vosk-model-uk"
    }

    default_init = {
        "sample_rate": 16000,
        "ffmpeg_path": "handlers/models/vosk"  # –ø—É—Ç—å –∫ ffmpeg
    }

    def __init__(self,
                 language="english",
                 sample_rate=None,
                 ffmpeg_path=None
                 ) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ Vosk –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∏
        –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.
        :param language: str  –º–æ–≤–∞ –¥–ª—è –º–æ–¥–µ–ª—ñ (english –∞–±–æ ukrainian)
        :param sample_rate: int  —á–∞—Å—Ç–æ—Ç–∞ –≤—ã–±–æ—Ä–∫–∏, –æ–±—ã—á–Ω–æ 16000
        :param ffmpeg_path: str  –ø—É—Ç—å –∫ ffmpeg
        """
        if language not in STT.MODELS:
            raise ValueError("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–≤–∞. –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏: english, ukrainian")

        self.model_path = STT.MODELS[language]
        self.sample_rate = sample_rate if sample_rate else STT.default_init["sample_rate"]
        self.ffmpeg_path = ffmpeg_path if ffmpeg_path else STT.default_init["ffmpeg_path"]

        self._check_model()

        model = Model(self.model_path)
        self.recognizer = KaldiRecognizer(model, self.sample_rate)
        self.recognizer.SetWords(True)

    def _check_model(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ Vosk –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        if not os.path.exists(self.model_path):
            raise Exception(
                "Vosk: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞–ø–∫—É model –≤ –ø–∞–ø–∫—É vosk\n"
                "–°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å –ø–æ —Å—Å—ã–ª–∫–µ https://alphacephei.com/vosk/models"
            )

        isffmpeg_here = False
        for file in os.listdir(self.ffmpeg_path):
            if file.startswith('ffmpeg'):
                isffmpeg_here = True

        if not isffmpeg_here:
            raise Exception(
                "Ffmpeg: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ ffmpeg.exe –≤ –ø–∞–ø–∫—É ffmpeg\n"
                "–°–∫–∞—á–∞–π—Ç–µ ffmpeg.exe –ø–æ —Å—Å—ã–ª–∫–µ https://ffmpeg.org/download.html"
            )
        self.ffmpeg_path = self.ffmpeg_path + '/ffmpeg'

    def audio_to_text(self, audio_file_name=None) -> str:
        """
        Offline-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Vosk
        :param audio_file_name: str –ø—É—Ç—å –∏ –∏–º—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        :return: str —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if audio_file_name is None:
            raise Exception("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞")
        if not os.path.exists(audio_file_name):
            raise Exception("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ wav –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ process.stdout
        process = subprocess.Popen(
            [self.ffmpeg_path,
             "-loglevel", "quiet",
             "-i", audio_file_name,
             "-ar", str(self.sample_rate),
             "-ac", "1",
             "-f", "s16le",
             "-"
             ],
            stdout=subprocess.PIPE
        )

        while True:
            data = process.stdout.read(4000)
            if len(data) == 0:
                break
            if self.recognizer.AcceptWaveform(data):
                pass

        result_json = self.recognizer.FinalResult()
        result_dict = json.loads(result_json)
        return result_dict["text"]


@dp.message_handler(content_types=[
    types.ContentType.VOICE,
    types.ContentType.AUDIO,
    types.ContentType.DOCUMENT
])
async def voice_message_handler(message: types.Message, state: FSMContext):
    global current_language
    if message.content_type == types.ContentType.VOICE:
        file_id = message.voice.file_id
    elif message.content_type == types.ContentType.AUDIO:
        file_id = message.audio.file_id
    elif message.content_type == types.ContentType.DOCUMENT:
        file_id = message.document.file_id
    else:
        await message.reply("–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è")
        return

    await message.reply('–í–∫–∞–∂—ñ—Ç—å –º–æ–≤—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ!', reply_markup=kb.lang_keyboard)

    await state.update_data(file_id=file_id)
    await VoiceToText.voice_to_text.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data in ["lang_english", "lang_ukrainian"],
                           state=VoiceToText.voice_to_text)
async def choose_language(call: types.CallbackQuery, state: FSMContext):
    global stt, current_language
    data = await state.get_data()

    if call.data.split("_")[1] == "english":
        current_language = "üá¨üáß"
    elif call.data.split("_")[1] == "ukrainian":
        current_language = "üá∫üá¶"

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"–û–±—Ä–∞–Ω–∞ –º–æ–≤–∞: {current_language}")
    await bot.send_chat_action(chat_id=call.message.chat.id, action='typing')

    stt = STT(language=call.data.split("_")[1])  # –í–∏–±–∏—Ä–∞—î–º–æ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏

    file_id = data.get('file_id')

    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_on_disk = Path("", f"{file_id}.tmp")
    await bot.download_file(file_path, destination=file_on_disk)

    text = stt.audio_to_text(file_on_disk)

    if not text:
        text = "–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è!"
    await call.message.reply(text)

    os.remove(file_on_disk)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    await state.finish()

    return
